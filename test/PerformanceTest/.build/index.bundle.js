!(function(){!(function () {

	function domAppend(parent,child){parent.appendChild(child);}function domRemove(parent,child){parent.removeChild(child);}function isFunction(fn){return typeof fn==="function"}function isString(str){return typeof str==="string"}function createDocumentFragment(){return document.createDocumentFragment()}const config={jsx:false};const hooks={c:0,h:[],v:null};function isSame(iter,iter2){let same=true;for(const key of Object.keys(iter)){if(iter[key]!==iter2[key]){same=false;break}}return same}function onNextTick(callback){setTimeout(callback,0);}function createVNode(tag="",props){return {type:tag,props,key:props.key||props["data-o"]||"tryk3l"}}

	function copyInternal(source,target){["_h","_i","_n","_r"].forEach(a=>{if(source[a]!==undefined)target[a]=source[a];});}let NAMESPACES;function initNs(){if(NAMESPACES)return;NAMESPACES=window.__namespaces||{svg:"2000/svg",space:"XML/1998/namespace",xlink:"1999/xlink",xmlns:"2000/xmlns/"};window.__namespaces=NAMESPACES;}function getNs(key){if(!config.jsx)return null;const ns=NAMESPACES[key];if(!ns)return null;if(ns.indexOf("http")!==0){return `http://www.w3.org/${ns}`}return ns}function _render(vnode,oldVnode){if(!config.jsx||isDomNode(vnode)||isString(vnode)||typeof vnode==="number"||vnode===undefined){return vnode}initNs();let element;const oldProps=oldVnode===null||oldVnode===void 0?void 0:oldVnode.props;if(oldVnode){copyInternal(oldVnode,vnode);if(vnode._i){vnode._i._v=vnode;vnode._i._r=oldVnode;}}if(Array.isArray(vnode)){const a=_render({type:Fragment,props:{children:vnode},key:""});return a}const{type:tag,props={},svg}=vnode;const children=props.children;const frag=isFragment(tag);if(isFunction(tag)&&!frag){var _tag$prototype;functionType=tag;let ref=vnode;if((_tag$prototype=tag.prototype)!==null&&_tag$prototype!==void 0&&_tag$prototype.render){let comp=vnode._i;if(!comp){vnode._i=comp=new tag(props);comp._v=vnode;const newVNode=comp.render();if(!isVNode(newVNode))return newVNode;newVNode.key=vnode.key;comp._r=vnode._r=newVNode;element=_render(newVNode);if(comp.componentDidMount){onNextTick(()=>comp.componentDidMount());}}else {const prevState=Object.assign({},comp.state);vnode._i.props=props;const newVNode=comp.render();if(!isVNode(newVNode))return newVNode;newVNode.key=vnode.key;element=_render(newVNode,vnode._r);comp._r=vnode._r=newVNode;element=vnode._n;if(comp.componentDidUpdate){onNextTick(()=>comp.componentDidUpdate(oldProps,prevState));}}}else {vnode._h=vnode._h||[];hooks.h=vnode._h;hooks.c=0;hooks.v=vnode;const newVNode=tag(props);if(!isVNode(newVNode))return newVNode;newVNode.key=vnode.key;element=_render(newVNode,vnode._r);vnode._r=newVNode;}if(props.ref){if(isFunction(props.ref)){props.ref(ref);}else if(props.ref.current!==undefined){props.ref.current=ref;}}}else {if(!frag){if(isDomNode(vnode)){element=tag;}if(!element&&oldVnode!==null&&oldVnode!==void 0&&oldVnode._n&&isSameChild(oldVnode,vnode)){element=oldVnode._n;}if(!element){if(!isString(tag))return;if(tag.indexOf("<")!==-1){renderer.innerHTML=tag;element=renderer.firstElementChild.cloneNode(true);renderer.innerHTML="";}else {if(!tag){element=document.createTextNode(props.text);}else {element=svg?document.createElementNS(getNs("svg"),tag):document.createElement(tag);}}}setElementAttributes(element,props,oldProps);}if(frag){element=createDocumentFragment();}vnode.props.children=createChildren(vnode,element,children,oldProps===null||oldProps===void 0?void 0:oldProps.children);}vnode._n=(oldVnode===null||oldVnode===void 0?void 0:oldVnode._n)||element;return vnode._n}function isSameChild(vnode,vnode2){if(!vnode||!vnode2)return false;return vnode===vnode2||vnode.key===vnode2.key&&vnode.type===vnode2.type}function createChildren(vnode,element,children=[],oldChildren){const oldChildrenMap=new Map;const oldChildrenArr=oldChildren||[];for(const child of oldChildrenArr){if(child!==null&&child!==void 0&&child.key)oldChildrenMap.set(child.key,child);}const newChildren=children.reduce((acc,val)=>acc.concat(val),[]).map((child,index)=>{let oldChild;if(isRenderableElement(child)){if(!isVNode(child)){child=createVNode("",{text:child});}if(vnode.svg){child.svg=true;}if(!child.props.key){child.key=vnode.key+(!isFragment(vnode)?index:"");}child.props["data-o"]=null;oldChild=oldChildrenMap.get(child.key);if(!isSameChild(child,oldChild)){oldChild=undefined;}if(isVNode(oldChild)){oldChildrenMap.delete(oldChild.key);}}let node=_render(child,oldChild);if(!isRenderableElement(node))return;if(element.childNodes[index]!==node)domAppend(element,node);return child});for(const[_,oldChild]of oldChildrenMap){if(isVNode(oldChild)){var _oldChild$_r;runUnmountCallbacks(oldChild);const node=oldChild._n||((_oldChild$_r=oldChild._r)===null||_oldChild$_r===void 0?void 0:_oldChild$_r._n);if(node)domRemove(node.parentNode,node);}}return newChildren}const getStyleString=style=>{if(isString(style))return style;if(!style||typeof style!=="object")return "";return Object.keys(style).reduce((prev,curr)=>{return `${prev+=curr.split(/(?=[A-Z])/).join("-").toLowerCase()}:${style[curr]};`},"")};const renderer=document.createElement("div");function setElementAttributes(element,props={},oldProps={}){if(element instanceof Text){element.textContent=props.text;}else if(isDomNode(element)){const sameProps={};for(let name in oldProps){let value=oldProps[name];if(value===props[name]){sameProps[name]=true;continue}if(/^on[A-Z]/.test(name)){element.removeEventListener(name.substr(2).toLowerCase(),value);}else element.removeAttribute(name);}for(let name in props){if(sameProps[name]){continue}let value=props[name];if(name==="className"||name==="children"||name==="key"){continue}else if(name==="style"){value=getStyleString(value);}else if(name==="html"){element.innerHTML=value;continue}else if(name==="dangerouslySetInnerHTML"){element.innerHTML=value.__html;continue}else if(name==="ref"&&value){if(isFunction(value)){value(element);}else if(value.current!==undefined){value.current=element;}continue}if(value===false||value===undefined)continue;if(/^on[A-Z]/.test(name)){element.addEventListener(name.substr(2).toLowerCase(),value);}else if(value!==null){value=value.toString();if(name.includes(":")&&element.tagName.toLowerCase()!="svg"){const[ns,nsName]=name.split(":");element.setAttributeNS(getNs(nsName)||getNs(ns),name,value);}else {element.setAttribute(name,value);}}}}}function isRenderableElement(element){return !!element||element===0}function runUnmountCallbacks(vnode){if(isVNode(vnode)){if(vnode._h){vnode._h.forEach(h=>{if(h.length===3&&isFunction(h[2])){h[2]();}});vnode._h=[];}else if(vnode._i&&vnode._i.componentWillUnmount){vnode._i.componentWillUnmount();delete vnode._i;}(vnode._r||vnode).props.children.forEach(child=>{if(isVNode(child)&&isFunction(child.type))runUnmountCallbacks(child);});delete vnode._n;}}function Fragment(props){return props.children}function getTestID(){return "tryk3l"}function isFragment(tag){if(isVNode(tag))tag=tag.type;return tag===Fragment}function isDomNode(tag){return tag instanceof HTMLElement||tag instanceof SVGElement}function isVNode(vnode){return !!vnode&&(!!vnode._n||!!vnode.props)}

	function pollQuerySelector(selector,callback,wait=1000){var el=document.querySelector(selector);if(el){callback(el);}else if(wait>0){setTimeout(function(){pollQuerySelector(selector,callback,wait-100);},100);}}function getChildrenArray(child){if(Array.isArray(child))return child;if(!child)return [];let children=[child];if(child.nodeType===11){children=Array.from(child.children);}return children}function clearPrevious(child,parent){const children=getChildrenArray(child);children.forEach(child=>{let id;if(isVNode(child)){id=child.key;}else {var _child$dataset;id=(_child$dataset=child.dataset)===null||_child$dataset===void 0?void 0:_child$dataset.o;}if(id){Array.from(parent.children).forEach(child=>{if(child.dataset.o===id){domRemove(parent,child);}});}});}function getChildrenAsFragment(child){const children=getChildrenArray(child);const node=createDocumentFragment();children.forEach(c=>{domAppend(node,c);if(!c.dataset.o){c.dataset.o=child.key||getTestID();}});return node}function createMutation(child){if(isDomNode(child)){return getChildrenAsFragment(child)}if(!config.jsx){return child}let node=child;if(isVNode(child)){const rendered=_render(child);node=getChildrenAsFragment(rendered);const children=[...node.childNodes];onNextTick(()=>{var _children$;const parent=(_children$=children[0])===null||_children$===void 0?void 0:_children$.parentElement;if(parent){new MutationObserver((mutations,observer)=>{mutations.forEach(mutation=>{mutation.removedNodes.forEach(el=>{if(children.includes(el)){observer.disconnect();runUnmountCallbacks(child);}});});}).observe(parent,{childList:true});}});}return node}function append(vnode,parent,clearPrev=true){const child=createMutation(vnode);if(clearPrev){clearPrevious(child,parent);}domAppend(parent,child);return vnode}

	const useEffect=(cb,deps)=>{var _hooks$h$hooks$c;const oldDeps=(_hooks$h$hooks$c=hooks.h[hooks.c])===null||_hooks$h$hooks$c===void 0?void 0:_hooks$h$hooks$c[1];let shouldCall=!oldDeps||!deps;if(!shouldCall&&deps){shouldCall=!isSame(deps,oldDeps||[]);}if(shouldCall){if(oldDeps&&hooks.h[hooks.c][2])hooks.h[hooks.c][2]();hooks.h[hooks.c]=["e",deps,null];((hooks,index)=>{onNextTick(()=>{hooks[index][2]=cb();});})(hooks.h,hooks.c);}hooks.c++;};const useState=defaultValue=>{if(!hooks.h[hooks.c]){hooks.h[hooks.c]=[defaultValue,((hooks,index,vnode)=>value=>{hooks[index][0]=value;if(vnode){onNextTick(()=>_render(vnode,vnode._r));}})(hooks.h,hooks.c,hooks.v)];}const state=hooks.h[hooks.c];hooks.c++;return state};

	function createElement(tag,props,...children){props=props||{};if(props.className){props.class=props.className;}else if(props.class){props.className=props.class;}props.children=children||[];const vnode=createVNode(tag,props);if(tag==="svg"){vnode.svg=true;}config.jsx=true;return vnode}const h=createElement;

	function shuffle(array){let currentIndex=array.length,randomIndex;while(currentIndex!=0){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex--;[array[currentIndex],array[randomIndex]]=[array[randomIndex],array[currentIndex]];}return array}const Arr=Array(10000).fill(1).map((_,i)=>`Text ${i}`);const TestComponent=()=>{const[showModal,setShowModal]=useState(false);const[arr,setArr]=useState(Arr);useEffect(()=>{setTimeout(()=>{setShowModal(true);},50);setTimeout(()=>{setShowModal(false);},250);},[]);return h("div",null,h("h3",null,h("a",{onClick:()=>setArr(shuffle(arr))},"Shuffle")),arr.map(v=>h("div",{key:v},v," - ",showModal.toString())))};pollQuerySelector("#app",target=>{console.time();append(h(TestComponent,null),target);console.timeEnd();});

})();
})();!(function(){var __a,__s,__f=function(){if(__a){return;}__a=1;__s=document.createElement('style');__s.dataset.id='tryk3l',__s.innerHTML='#wrapper { display: none; } #app { background: white !important; overflow: auto !important; display: block !important; } #app a { cursor: pointer; } ';document.head.appendChild(__s);};__f();})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,