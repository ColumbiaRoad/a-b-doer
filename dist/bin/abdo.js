#!/usr/bin/env node
"use strict";var _fs=require("fs");var _path=require("path");var _buildspec=_interopRequireDefault(require("../lib/buildspec"));var _bundler=require("../lib/bundler");var _puppeteer=require("../lib/puppeteer");var _chalk=require("chalk");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const cmd=process.argv[2];const cmds=["watch","build","preview","build-all"];if(!cmds.includes(cmd)){console.log("Unsupported command: "+cmd);console.log("Supported commands are: "+cmds.join(", "));process.exit()}const watch=cmd==="watch";const targetPath=process.argv[3];console.log("");// More graceful exit
process.on("SIGINT",()=>{console.log("");process.exit()});if(watch||cmd==="build"){buildSingleEntry()}else{buildMultiEntry()}async function buildSingleEntry(){const config=(0,_buildspec.default)(targetPath);switch(cmd){case"watch":console.log((0,_chalk.cyan)("Starting bundler with a file watcher..."));break;case"build":console.log((0,_chalk.cyan)("Building test bundle..."));break;default:break;}console.log("Entry:",(0,_chalk.yellow)(config.entryFile));console.log("");try{await(0,_bundler.bundler)({...config,watch});console.log((0,_chalk.green)("Bundle built."));console.log("")}catch(error){console.log(error)}}async function buildMultiEntry(){const testConfig=(0,_buildspec.default)(targetPath,true);const buildOnly=cmd==="build-all";let indexFiles=[];const{testPath,entryFile}=testConfig;if(!entryFile){if(testConfig.entry){entryFile=testConfig.entry}else{const files=(0,_fs.readdirSync)(testPath,{encoding:"utf8"});indexFiles=indexFiles.concat(files).map(file=>(0,_path.join)(testPath,file))}}else{indexFiles=indexFiles.concat(entryFile)}if(!indexFiles.length){console.log("Couldn't find any test files");process.exit()}switch(cmd){case"preview":console.log((0,_chalk.cyan)("Starting bundlers for preview..."));break;case"build-all":console.log((0,_chalk.cyan)("Building all test bundles..."));break;default:break;}console.log();try{if(!buildOnly){await(0,_puppeteer.getBrowser)(testConfig)}for(const entryFile of indexFiles){const output=await(0,_bundler.bundler)({...(0,_buildspec.default)(entryFile)});if(!buildOnly){await(0,_bundler.openPage)(output)}else{console.log(entryFile.replace(process.env.INIT_CWD,""),(0,_chalk.green)("Done."))}}if(buildOnly){console.log();console.log((0,_chalk.green)("Test bundles built."));console.log();process.exit(0)}}catch(e){console.log(e);// Do nothing
}}