#!/usr/bin/env node
"use strict";var _fs=require("fs");var _path=_interopRequireDefault(require("path"));var _pluginutils=require("@rollup/pluginutils");var _buildspec=_interopRequireDefault(require("../lib/buildspec"));var _bundler=require("../lib/bundler");var _puppeteer=require("../lib/puppeteer");var _chalk=require("chalk");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const cmd=process.argv[2];const cmds=["watch","build","preview","build-all","screenshot"];if(!cmds.includes(cmd)){console.log("Unsupported command: "+cmd);console.log("Supported commands are: "+cmds.join(", "));process.exit()}const watch=cmd==="watch";const targetPath=process.argv[3]||".";console.log("");process.on("SIGINT",()=>{console.log("");process.exit()});switch(cmd){case"watch":case"build":buildSingleEntry(targetPath);break;case"preview":case"build-all":buildMultiEntry(targetPath);break;case"screenshot":createScreenshots(targetPath);break;default:process.exit();}async function buildSingleEntry(targetPath){const[config]=getMatchingBuildspec(targetPath);if(!config){console.log((0,_chalk.red)("Couldn't find buildspec.json for the variant",targetPath));process.exit()}switch(cmd){case"watch":console.log((0,_chalk.cyan)("Starting bundler with a file watcher..."));break;case"build":console.log((0,_chalk.cyan)("Building variant bundle..."));break;default:break;}console.log("Entry:",(0,_chalk.yellow)(config.entryFile));console.log("");try{await(0,_bundler.bundler)({...config,watch});console.log((0,_chalk.green)("Bundle built."));console.log("")}catch(error){console.log(error)}}async function buildMultiEntry(targetPath){const buildOnly=cmd==="build-all";const buildspecs=getMatchingBuildspec(targetPath);const[testConfig]=buildspecs;if(!testConfig){console.log("Couldn't find any variant files");process.exit()}switch(cmd){case"preview":console.log((0,_chalk.cyan)("Starting bundlers for preview..."));break;case"build-all":console.log((0,_chalk.cyan)("Building all variant bundles..."));break;default:break;}console.log();try{if(!buildOnly){await(0,_puppeteer.getBrowser)(testConfig)}for(const buildspec of buildspecs){const{entryFile}=buildspec;const output=await(0,_bundler.bundler)(buildspec);if(!buildOnly){await(0,_bundler.openPage)(output)}else{console.log(entryFile.replace(process.env.INIT_CWD,""),(0,_chalk.green)("Done."))}}if(buildOnly){console.log();console.log((0,_chalk.green)("Variant bundles built."));console.log();process.exit(0)}}catch(e){console.log(e)}}async function createScreenshots(targetPath){const buildspecs=getMatchingBuildspec(targetPath);if(!buildspecs.length){console.log((0,_chalk.red)("0 test variants found with path:"));console.log(targetPath);process.exit()}let origPage;for(const config of buildspecs){const nth=buildspecs.indexOf(config)+1;const{entryFile}=config;const output=await(0,_bundler.bundler)(config);const page=await(0,_bundler.openPage)({...output,headless:true,devtools:false});await page.screenshot({path:_path.default.join(config.testPath,".build",`screenshot-var${nth}.png`),fullPage:true});if(!origPage){origPage=await page.browser().newPage()}await origPage.goto(config.url,{waitUntil:"networkidle0"});await origPage.screenshot({path:_path.default.join(config.testPath,".build",`screenshot-orig.png`),fullPage:true});console.log((0,_chalk.green)("Took screenshots for"),entryFile.replace(process.env.INIT_CWD,""));console.log()}if(origPage){await origPage.browser().close()}console.log((0,_chalk.green)("Done."))}function getMatchingBuildspec(targetPath){let indexFiles=[];targetPath=_path.default.resolve(process.env.INIT_CWD,targetPath);if((0,_fs.lstatSync)(targetPath).isFile()){indexFiles=indexFiles.concat(targetPath)}if(!indexFiles.length){const files=(0,_fs.readdirSync)(targetPath,{encoding:"utf8"});indexFiles=indexFiles.concat(targetPath,files.map(file=>_path.default.join(targetPath,file)).filter(path=>(0,_fs.lstatSync)(path).isDirectory()))}return indexFiles.map(entryFile=>{const filter=(0,_pluginutils.createFilter)([/\.(jsx?|tsx?|(le|sa|sc|c)ss)$/]);if(entryFile.includes(".build")){return null}if(!filter(entryFile)&&!(0,_fs.lstatSync)(entryFile).isDirectory()){return null}return(0,_buildspec.default)(entryFile)}).filter(Boolean)}