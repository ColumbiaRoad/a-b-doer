#!/usr/bin/env node
"use strict";var _fs=require("fs");var _path=_interopRequireDefault(require("path"));var _pluginutils=require("@rollup/pluginutils");var _buildspec=_interopRequireDefault(require("../lib/buildspec"));var _bundler=require("../lib/bundler");var _puppeteer=require("../lib/puppeteer");var _chalk=require("chalk");var _chokidar=_interopRequireDefault(require("chokidar"));var _minimist=_interopRequireDefault(require("minimist"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const cmd=process.argv[2];const cmds=["watch","build","preview","build-all","screenshot"];if(!cmds.includes(cmd)){console.log("Unsupported command: "+cmd);console.log("Supported commands are: "+cmds.join(", "));process.exit()}const watch=cmd==="watch";let rollupWatcher=null;const targetPath=process.argv[3]||".";const cmdArgs=(0,_minimist.default)(process.argv.slice(3),{boolean:["build"],alias:{b:"build",u:"url",n:"name"}});process.on("SIGINT",()=>{console.log("");process.exit()});switch(cmd){case"watch":case"build":buildSingleEntry(targetPath);break;case"preview":case"build-all":buildMultiEntry(targetPath);break;case"screenshot":createScreenshots(targetPath);break;default:process.exit();}async function buildSingleEntry(targetPath){const[config]=getMatchingBuildspec(targetPath);if(!config){console.log((0,_chalk.red)("Couldn't find buildspec.json for the variant",targetPath));process.exit()}switch(cmd){case"watch":if(rollupWatcher){rollupWatcher.close()}else{console.log((0,_chalk.cyan)("Starting bundler with a file watcher..."))}const watcher=_chokidar.default.watch(config._specFiles,{awaitWriteFinish:true});watcher.on("change",filepath=>{console.log("");console.log("Buildspec changed",(0,_chalk.yellow)(filepath));console.log((0,_chalk.green)("Restarting bundler..."));console.log("");buildSingleEntry(targetPath);watcher.close()});break;case"build":console.log((0,_chalk.cyan)("Building variant bundle..."));break;default:break;}console.log("Entry:",(0,_chalk.yellow)(config.entryFile));console.log("");try{const output=await(0,_bundler.bundler)({...config,watch});rollupWatcher=output.watcher;if(!watch){console.log((0,_chalk.green)("Bundle built."))}console.log("")}catch(error){console.log(error)}}async function buildMultiEntry(targetPath){const buildOnly=cmd==="build-all";const buildspecs=getMatchingBuildspec(targetPath);const[testConfig]=buildspecs;if(!testConfig){console.log("Couldn't find any variant files");process.exit()}switch(cmd){case"preview":console.log((0,_chalk.cyan)("Starting bundlers for preview..."));break;case"build-all":console.log((0,_chalk.cyan)("Building all variant bundles..."));break;default:break;}console.log();try{if(!buildOnly){await(0,_puppeteer.getBrowser)(testConfig)}for(const buildspec of buildspecs){const{entryFile}=buildspec;const output=await(0,_bundler.bundler)(buildspec);if(!buildOnly){await(0,_bundler.openPage)(output)}else{console.log(entryFile.replace(process.env.INIT_CWD,""),(0,_chalk.green)("Done."))}}if(buildOnly){console.log();console.log((0,_chalk.green)("Variant bundles built."));console.log();process.exit(0)}}catch(e){console.log(e)}}async function createScreenshots(targetPath){const buildspecs=getMatchingBuildspec(targetPath);const{url:cmdArgUrl,name,...screenshotArgs}=cmdArgs;let cmdArgBuild=false;if("build"in screenshotArgs){cmdArgBuild=true;delete screenshotArgs.build}if(!buildspecs.length){console.log((0,_chalk.red)("0 test variants found with path:"));console.log(targetPath);process.exit()}let origPage;console.log((0,_chalk.cyan)(`Taking screenshots`));console.log();for(const config of buildspecs){const nth=buildspecs.indexOf(config)+1;if(cmdArgUrl){if(isNaN(cmdArgUrl)){config.url=[cmdArgUrl]}else{if(Array.isArray(config.url)){const urlIndex=+cmdArgUrl;if(urlIndex<config.url.length){config.url=[config.url[urlIndex]]}else{console.log((0,_chalk.yellow)(`Undefined index for test config url. Argument was`),"--url="+cmdArgUrl);console.log((0,_chalk.yellow)(`Current config`),config.url)}}else{console.log((0,_chalk.yellow)(`Test config url wasn't an array, can't use indexed url argument. Argument was`),"--url="+cmdArgUrl)}}}const{testPath,buildDir,entryFile,entryFileExt,screenshot={},onLoad,onBefore}=config;Object.assign(screenshot,screenshotArgs);let{waitFor,waitForOptions={},onLoad:screenshotOnLoad,onBefore:screenshotOnBefore,...pptrScreenshotOptions}=screenshot;const entryName=_path.default.basename(entryFile,"."+entryFileExt);const singleOnLoad=async page=>{if(onLoad)await onLoad(page);if(screenshotOnLoad)await screenshotOnLoad(page)};const singleOBefore=async page=>{if(onBefore)await onBefore(page);if(screenshotOnBefore)await screenshotOnBefore(page)};const bundleConfig={...config,onLoad:singleOnLoad,onBefore:singleOBefore,preview:true};if(!cmdArgBuild){const bundlePath=_path.default.join(testPath,buildDir,`${entryName}.bundle.js`);if((0,_fs.lstatSync)(bundlePath).isFile()){bundleConfig.assetBundle={bundle:(0,_fs.readFileSync)(bundlePath).toString()}}}const output=bundleConfig.assetBundle?bundleConfig:await(0,_bundler.bundler)(bundleConfig);console.log((0,_chalk.cyan)(`Creating a bundle for screenshot`),entryFile);console.log();const page=await(0,_bundler.openPage)({...output,headless:true,devtools:false});const url=Array.isArray(config.url)?config.url[0]:config.url;const waitForAll=async page=>{if(typeof waitFor==="string"){console.log((0,_chalk.cyan)(`Waiting for selector ${waitFor}...`));await page.waitForSelector(waitFor,waitForOptions)}if(typeof waitFor==="number"){console.log((0,_chalk.cyan)(`Waiting for timeout ${waitFor} ms...`));await page.waitForTimeout(waitFor,waitForOptions)}if(typeof waitFor==="function"){console.log((0,_chalk.cyan)(`Waiting for function...`));await page.waitForFunction(waitFor,waitForOptions)}};if(pptrScreenshotOptions.fullPage===undefined){pptrScreenshotOptions.fullPage=true}if(pptrScreenshotOptions.clip){pptrScreenshotOptions.fullPage=false}await waitForAll(page);await page.screenshot({...pptrScreenshotOptions,path:_path.default.join(config.testPath,config.buildDir,`screenshot-${_path.default.basename(name||entryName)}-v${nth}.png`)});console.log((0,_chalk.cyan)(`Screenshot ready`),`${entryFile}, variant ${nth}`);origPage=await page.browser().newPage();await singleOBefore(origPage);await origPage.goto(url,{waitUntil:"networkidle0"});await singleOnLoad(origPage);await waitForAll(origPage);await origPage.screenshot({...pptrScreenshotOptions,path:_path.default.join(config.testPath,config.buildDir,`screenshot-${_path.default.basename(name||entryName)}-orig.png`)});console.log((0,_chalk.cyan)(`Screenshot ready`),`${entryFile}, original`);console.log();console.log((0,_chalk.green)("Took screenshots for"),entryFile.replace(process.env.INIT_CWD,""));console.log()}console.log((0,_chalk.green)("Done."));if(origPage){await origPage.browser().close()}}function getMatchingBuildspec(targetPath){let indexFiles=[];targetPath=_path.default.resolve(process.env.INIT_CWD,targetPath);if((0,_fs.lstatSync)(targetPath).isFile()){indexFiles=indexFiles.concat(targetPath)}if(!indexFiles.length){const files=(0,_fs.readdirSync)(targetPath,{encoding:"utf8"});indexFiles=indexFiles.concat(targetPath,files.map(file=>_path.default.join(targetPath,file)).filter(path=>(0,_fs.lstatSync)(path).isDirectory()))}return indexFiles.map(entryFile=>{const filter=(0,_pluginutils.createFilter)([/\.(jsx?|tsx?|(le|sa|sc|c)ss)$/]);if(entryFile.includes(".build")){return null}if(!filter(entryFile)&&!(0,_fs.lstatSync)(entryFile).isDirectory()){return null}const spec=(0,_buildspec.default)(entryFile);if(spec&&new RegExp(`${spec.buildDir}(/|$)`).test(entryFile)){return null}return spec}).filter(Boolean)}