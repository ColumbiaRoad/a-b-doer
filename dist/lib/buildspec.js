"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=_default;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _default(testPath,pathsOnly){if(!testPath){console.log("Test folder is missing");process.exit()}testPath=_path.default.resolve(process.env.INIT_CWD,testPath);let entryFile="";try{// If the test path argument is a file, use it as an entry
if(!_fs.default.lstatSync(testPath).isDirectory()){let testDir=_path.default.dirname(testPath);entryFile=testPath.replace(testDir,".");testPath=testDir}}catch(error){console.error(error);process.exit()}if(!_fs.default.existsSync(testPath)){console.log("Test folder does not exist",testPath);process.exit()}// Check & load build related data
const testConfig={};const configPath=_path.default.resolve(process.env.INIT_CWD,"config.json");if(_fs.default.existsSync(configPath)){Object.assign(testConfig,require(configPath))}if(!pathsOnly){try{const parentSpecFile=_path.default.join(testPath,"..","buildspec.json");if(_fs.default.existsSync(parentSpecFile)){Object.assign(testConfig,require(parentSpecFile))}const specFile=_path.default.join(testPath,"buildspec.json");if(_fs.default.existsSync(specFile)){Object.assign(testConfig,require(specFile))}}catch(error){}if(!Object.keys(testConfig).length){console.log("test's buildspec.json is missing");process.exit()}}if(!entryFile){if(testConfig.entry){entryFile=testConfig.entry}else{const files=_fs.default.readdirSync(testPath,{encoding:"utf8"});// Find first index file
const indexFile=files.find(file=>/index\.(jsx?|tsx?|(le|sa|sc|c)ss)$/.test(file));if(indexFile){entryFile=indexFile}// Try some style file
else{entryFile=files.find(file=>/styles?\.(le|sa|sc|c)ss$/.test(file))}}}let entryPart=entryFile;if(entryFile){entryFile=_path.default.resolve(testPath,entryFile)}return{...testConfig,testPath,entryFile,entryPart}}