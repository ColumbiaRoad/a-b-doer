"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=_default;exports.config=void 0;var _path=_interopRequireDefault(require("path"));var _fs=_interopRequireDefault(require("fs"));var _pluginutils=require("@rollup/pluginutils");var _lodash=_interopRequireDefault(require("lodash.merge"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const config={appendStyles:true,buildDir:".build",chunkImages:true,devtools:true,historyChanges:true,minify:true,modules:true,preact:false,watch:false,windowSize:[1920,1080]};exports.config=config;function getConfigFileJsonOrJSContent(configPath){const fileDir=_path.default.dirname(configPath);const fileWithoutExt=_path.default.basename(configPath,".json");const configPathJs=_path.default.resolve(fileDir,fileWithoutExt+".js");if(_fs.default.existsSync(configPath)){return require(configPath)}else if(_fs.default.existsSync(configPathJs)){return require(configPathJs)}return{}}function _default(testPath){if(!testPath){console.log("Test folder is missing");process.exit()}let entryFile="";try{if(!_fs.default.lstatSync(testPath).isDirectory()){let testDir=_path.default.dirname(testPath);entryFile=testPath.replace(testDir,".");testPath=testDir}}catch(error){console.error(error);process.exit()}if(!_fs.default.existsSync(testPath)){console.log("Test folder does not exist",testPath);process.exit()}const testConfig={};(0,_lodash.default)(testConfig,getConfigFileJsonOrJSContent(_path.default.resolve(process.cwd(),"config.json")));try{(0,_lodash.default)(testConfig,getConfigFileJsonOrJSContent(_path.default.join(testPath,"..","buildspec.json")));(0,_lodash.default)(testConfig,getConfigFileJsonOrJSContent(_path.default.join(testPath,"buildspec.json")))}catch(error){console.error(error)}if(!Object.keys(testConfig).length){return null}if(!entryFile){if(testConfig.entry){entryFile=testConfig.entry}else{const files=_fs.default.readdirSync(testPath,{encoding:"utf8"});const indexFile=files.find(file=>/index\.(jsx?|tsx?|(le|sa|sc|c)ss)$/.test(file));if(indexFile){entryFile=indexFile}else{entryFile=files.find(file=>/styles?\.(le|sa|sc|c)ss$/.test(file))}}}let entryPart=entryFile;if(entryFile){entryFile=_path.default.resolve(testPath,entryFile)}if(!entryFile)return null;const filter=(0,_pluginutils.createFilter)(testConfig.include,testConfig.exclude);if(!filter(entryFile)){return null}if(testConfig.url&&!Array.isArray(testConfig.url)){testConfig.url=[testConfig.url]}return{...config,...testConfig,testPath,entryFile,entryPart,entryFileExt:entryFile.split(".").pop()}}